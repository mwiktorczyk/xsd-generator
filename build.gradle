import org.ajoberstar.grgit.Grgit

plugins {
  id "com.jfrog.bintray" version "1.4"
  id "org.ajoberstar.grgit" version "1.3.2"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

ext {
  grgit = Grgit.open(project.rootDir)
  grgitHead = grgit.head()
  javaVersion = 1.8
  myGithubUrl = 'https://github.com/mwiktorczyk/xsd-generator'
}

group = 'pl.softmate.dbunit'
version = '0.0.9'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
buildDir = 'target'

repositories {
  jcenter()
}

dependencies {
  compile 'org.apache.ant:ant:1.9.6'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hibernate:hibernate-core:5.0.3.Final'
  testCompile 'org.postgresql:postgresql:9.4-1204-jdbc42'
  testCompile 'org.mariadb.jdbc:mariadb-java-client:1.2.3'
  testCompile 'mysql:mysql-connector-java:5.1.37'
}

ext.sharedManifest = manifest {
  attributes(
    'Implementation-Title': 'Gradle',
    'Implementation-Version': version,
    'Git-Commit-Id': grgitHead.id,
    'Git-Commit-Date': grgitHead.getDate().format("yyyy-MM-dd HH:mm:ss")
    )
}

task sourceJar(type: Jar) {
  description = 'An archive of the source code for Maven Central'
  classifier = 'sources'
  from sourceSets.main.java
}

artifacts {
  archives jar, sourceJar
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')

  configurations = ['archives']

  pkg {
    repo = 'maven'
    name = project.name
    desc = "A Gradle plugin for loading and working with yaml properties, enhancing Gradle's built in functionality."
    licenses = ['MIT']
    websiteUrl = project.myGithubUrl
    issueTrackerUrl = "${project.myGithubUrl}/issues"
    vcsUrl = "${project.myGithubUrl}.git"
    labels = ['DbUnit', 'Ant']
    publicDownloadNumbers = true
    version {
      vcsTag = project.version
      released  = new Date()
    }
  }
}

tasks.each { t ->
  if (t instanceof org.gradle.jvm.tasks.Jar) {
    t.manifest = project.manifest {
      from sharedManifest
    }
  }
}

task dockerUp(type:Exec) {
    description = 'Starts Docker container used for testing'
    group = 'Docker'
    workingDir "${project.rootDir}/docker"
    commandLine 'docker-compose', 'up', '-d'
}

task dockerStop(type:Exec) {
    description = 'Stops Docker container used for testing'
    group = 'Docker'
    workingDir "${project.rootDir}/docker"
    commandLine 'docker-compose', 'stop'
}

